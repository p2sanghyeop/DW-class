이클립스로 코딩할때 오류나는 이유
1. 중괄호 확인
2. 오타
3. ; 확인


for 문
for (int i=1; i<=100; ++i)
     선언      조건    카운트연산(증감연산)
변수는 태어난 {}안에서만 사용할수 있다 
{}가 끝나면 소멸한다
{}안에 있는 변수를 지역변수라 한다
{}밖에 있는 변수를 전역변수라 한다
변수를 비교했을 때 수명이 긴 변수가 전역변수가 된다
지역변수는 항상 전역변수랑 비교 (누가더 오래 사는지)

디버깅
내가 짠 코드의 값을 보여줌
->코드를 추적하는 과정
잘 모를때는 디버깅을 해 변수가 변하는 것을 확인
개발하고 나서 디버깅을 한 후 출시

브레이크
for문에서 숫자를 끊어줄때 사용

반복문
공통점 : 무언가를 반복해서 작업함
차이점 : for문 - 제한된 조건이 옴
        while - 무한으로 실행 break 를 사용해서 끊어줘야함

        		//이중 for문 사용
		//변수 선언금지
		//프린트 출력
		for (int i =2 ; i<=9; ++i ) {
			System.out.println(i+"단은");
			for(int j=1; j<=9; ++j) {
				System.out.println(i+"x"+j+"="+j*i);
for 
while
Iot랑 통신할때 많이 사용

소문자 변수는 값이 변경 가능하다는걸 의미
String name = "철수"
대문자 변수는 값이 불가능 (상수값)
final dlouble PI = 3.14
Straing NAME_ACTOR = "박서준"


자바 끝
if/else, for, while, 배열(반복문 친구)
클래스, 메소드 - 자바 특징
제네릭 컬렉션 *****

for(int i=9; i>=0; --i) 반대로 사용 가능

int i=0
for(i=0; i<0; ++i)

int x=5;
for(int i=x; i<5; i++)

                        for(int i=0; i<=5; ++i) {
			for(int j=1; j<=i; ++j ) {
				System.out.print("*");
			}
				System.out.println();
		        }
                        for(int i=9; i>=5; --i) {
			for(int j=5; j<=i; ++j ) {
				System.out.print("*");
			}
				System.out.println();
		        }

