String ==은 비교하고자 하는 두개의 대상의 주소값(위치)을 비교함
->call by reference
equals는 비교하고자 하는 두개의 대상의 값 자체를 비교
->call by value
JAVA문자 비교는 equals를 쓴다
String id ="Java";
		String id_2="Java";
		if (id.equals("Java")) {
			System.out.println("아이디가 맞습니다");
		}
		else {
			System.out.println("아이디가 다릅니다");
		}
		if (id == id_2){
			System.out.println("아이디가 맞습니다");
		}
		else {
			System.out.println("아이디가 다릅니다");
	}


배열

무의미하게 나열된 문자를 방지하기 위해 사용

int array[] = {2,4,6,9};
		System.out.println(array[1]);//첫번째 배열(index)호출
		System.out.println(array.length);//길이호출-데이터의 개수
		//System.out.println(array[4]);
		//길이를 벗어나 에러가 뜬다
		for(int i=0; i<array.length; ++i) {
			System.out.println("배열의 있는 인데스 값은:"+array[i]);
		}
        array[0];
        array[1];
        array[2];
        array[3];

//**length**,[],array

배열 총합 더하기
int z=0;
		for(int i=0; i<array.length; ++i) {
			 {
				z=z+array[i];
			}
			
		}
		System.out.println("배열 총합은:"+z);

배열안에는 숫자만 들어올수 있다

for문 쓰는 방식
1. for(int i : array){
}
-> 향상된 for문(for each)

2. for(int i=0; i<array.length; ++i)
-> 구형 for문


정렬오름차순
int array[] = {5,11,2,0,7};
		Arrays.sort(array);
		for(int i=0; i<array.length; ++i) {
			System.out.println(array[i]);
		}
정렬 내림차순
Integer[] array = {5,11,2,0,7};
		Arrays.sort(array, Collections.reverseOrder());
		for(int i=0; i<array.length; ++i) {
		System.out.println(array[i]);